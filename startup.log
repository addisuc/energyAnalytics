[INFO] Scanning for projects...
[INFO] 
[INFO] --------------------< com.weather:weather-service >---------------------
[INFO] Building weather-service 1.0.0
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ weather-service >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ weather-service ---
[INFO] Copying 7 resources from src/main/resources to target/classes
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ weather-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ weather-service ---
[INFO] skip non existing resourceDirectory /Users/anibret/projects/weather-service/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ weather-service ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ weather-service <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ weather-service ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-04 11:11:56 - Starting WeatherServiceApplication using Java 17.0.8 with PID 69887 (/Users/anibret/projects/weather-service/target/classes started by anibret in /Users/anibret/projects/weather-service)
2025-10-04 11:11:56 - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-10-04 11:11:56 - The following 1 profile is active: "dev"
2025-10-04 11:11:57 - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-04 11:11:57 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-04 11:11:57 - Finished Spring Data repository scanning in 188 ms. Found 8 JPA repository interfaces.
2025-10-04 11:11:58 - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-04 11:11:58 - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.AlertHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.AlertRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.EnergyDataRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.HistoricalWeatherDataRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.SubscriptionRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.WeatherDataRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.weather.service.repository.WeatherForecastRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-10-04 11:11:58 - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-10-04 11:11:59 - Tomcat initialized with port 8080 (http)
2025-10-04 11:11:59 - Starting service [Tomcat]
2025-10-04 11:11:59 - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-10-04 11:11:59 - Initializing Spring embedded WebApplicationContext
2025-10-04 11:11:59 - Root WebApplicationContext: initialization completed in 3041 ms
2025-10-04 11:12:00 - HikariPool-1 - Starting...
2025-10-04 11:12:00 - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-10-04 11:12:00 - HikariPool-1 - Start completed.
2025-10-04 11:12:00 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-04 11:12:00 - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-10-04 11:12:01 - HHH000026: Second-level cache disabled
2025-10-04 11:12:01 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-04 11:12:01 - HHH000511: The 2.2.0 version for [org.hibernate.dialect.PostgreSQLDialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 11.0.0. Check the community dialects project for available legacy versions.
2025-10-04 11:12:01 - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-04 11:12:02 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    alter table if exists subscriptions 
       drop constraint if exists FKhro52ohfqfbay9774bev0qinr
Hibernate: 
    drop table if exists alert_history cascade
Hibernate: 
    drop table if exists alerts cascade
Hibernate: 
    drop table if exists energy_data cascade
Hibernate: 
    drop table if exists energy_forecasts cascade
Hibernate: 
    drop table if exists historical_weather_data cascade
Hibernate: 
    drop table if exists subscriptions cascade
Hibernate: 
    drop table if exists users cascade
Hibernate: 
    drop table if exists weather_data cascade
Hibernate: 
    drop table if exists weather_forecast cascade
Hibernate: 
    create table alert_history (
        actual_value float(53) not null,
        notification_sent boolean not null,
        threshold_value float(53) not null,
        alert_id bigint not null,
        id bigserial not null,
        triggered_at timestamp(6) not null,
        message varchar(255) not null,
        notification_status varchar(255),
        primary key (id)
    )
Hibernate: 
    create table alerts (
        is_active boolean not null,
        threshold_value float(53) not null,
        trigger_count integer not null,
        created_at timestamp(6) not null,
        id bigserial not null,
        last_triggered timestamp(6),
        user_id bigint not null,
        alert_type varchar(255) not null,
        name varchar(255) not null,
        notification_method varchar(255) not null,
        region varchar(255) not null,
        threshold_operator varchar(255) not null,
        webhook_url varchar(255),
        primary key (id)
    )
Hibernate: 
    create table energy_data (
        energy_price float(53),
        grid_demand float(53),
        solar_generation float(53),
        total_consumption float(53),
        wind_generation float(53),
        id bigserial not null,
        timestamp timestamp(6),
        region varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table energy_forecasts (
        confidence_level float(53) not null,
        predicted_demand float(53) not null,
        predicted_price float(53) not null,
        predicted_solar_generation float(53) not null,
        predicted_wind_generation float(53) not null,
        forecast_date timestamp(6) not null,
        id bigserial not null,
        target_date timestamp(6) not null,
        forecast_type varchar(255) not null,
        region varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table historical_weather_data (
        cloud_cover float(53) not null,
        efficiency float(53) not null,
        solar_generation float(53) not null,
        solar_irradiance float(53) not null,
        temperature float(53) not null,
        total_consumption float(53) not null,
        wind_generation float(53) not null,
        wind_speed float(53) not null,
        id bigserial not null,
        timestamp timestamp(6) not null,
        region varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table subscriptions (
        current_usage integer,
        usage_limit integer,
        end_date timestamp(6),
        id bigserial not null,
        start_date timestamp(6) not null,
        user_id bigint unique,
        plan varchar(255) not null check (plan in ('FREE','BASIC','PRO','ENTERPRISE')),
        status varchar(255) not null check (status in ('ACTIVE','EXPIRED','CANCELLED','SUSPENDED')),
        stripe_subscription_id varchar(255),
        primary key (id)
    )
Hibernate: 
    create table users (
        id bigserial not null,
        company_name varchar(255),
        email varchar(255) not null unique,
        first_name varchar(255),
        job_title varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        phone_number varchar(255),
        role varchar(255) not null,
        subscription_plan varchar(255),
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table weather_data (
        feels_like float(53),
        humidity integer,
        latitude float(53),
        longitude float(53),
        pressure float(53),
        temperature float(53),
        visibility float(53),
        wind_direction integer,
        wind_speed float(53),
        id bigserial not null,
        timestamp timestamp(6) not null,
        city varchar(255) not null,
        country varchar(255),
        description varchar(255),
        icon varchar(255),
        source varchar(255),
        primary key (id)
    )
Hibernate: 
    create table weather_forecast (
        humidity integer,
        latitude float(53),
        longitude float(53),
        max_temperature float(53),
        min_temperature float(53),
        pressure float(53),
        temperature float(53),
        wind_direction integer,
        wind_speed float(53),
        created_at timestamp(6) not null,
        forecast_date timestamp(6) not null,
        id bigserial not null,
        city varchar(255) not null,
        country varchar(255),
        description varchar(255),
        icon varchar(255),
        source varchar(255),
        primary key (id)
    )
Hibernate: 
    alter table if exists subscriptions 
       add constraint FKhro52ohfqfbay9774bev0qinr 
       foreign key (user_id) 
       references users
2025-10-04 11:12:02 - Initialized JPA EntityManagerFactory for persistence unit 'default'
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_weather_data_city_timestamp ON weather_data(city, timestamp DESC)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_weather_data_city_timestamp ON weather_data(city, timestamp DESC) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_weather_data_timestamp ON weather_data(timestamp DESC)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_weather_data_timestamp ON weather_data(timestamp DESC) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_energy_data_region_timestamp ON energy_data(region, timestamp DESC)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_energy_data_region_timestamp ON energy_data(region, timestamp DESC) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_users_email ON users(email)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email ON users(email) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_alerts_user_id_active ON alerts(user_id, is_active)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_user_id_active ON alerts(user_id, is_active) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_alert_history_alert_id_timestamp ON alert_history(alert_id, timestamp DESC)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alert_history_alert_id_timestamp ON alert_history(alert_id, timestamp DESC) [42001-224]
Index creation skipped: Syntax error in SQL statement "CREATE INDEX CONCURRENTLY [*]IF NOT EXISTS idx_historical_weather_region_date ON historical_weather_data(region, date DESC)"; expected "., ON"; SQL statement:
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_historical_weather_region_date ON historical_weather_data(region, date DESC) [42001-224]
2025-10-04 11:12:02 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-04 11:12:04 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-04 11:12:04 - 

Using generated security password: e6afa43e-c35f-40ba-a3de-20c842f81091

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-10-04 11:12:04 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6571d5a1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@132b00bb, org.springframework.security.web.context.SecurityContextHolderFilter@247dad0f, org.springframework.security.web.header.HeaderWriterFilter@605ba15f, org.springframework.web.filter.CorsFilter@134a27c1, org.springframework.security.web.authentication.logout.LogoutFilter@12ad2a0b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2211432e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2591343, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6015326, org.springframework.security.web.access.ExceptionTranslationFilter@b95e63a, org.springframework.security.web.access.intercept.AuthorizationFilter@63734973]
2025-10-04 11:12:06 - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-10-04 11:12:06 - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-10-04 11:12:06 - Closing JPA EntityManagerFactory for persistence unit 'default'
Hibernate: 
    alter table if exists subscriptions 
       drop constraint if exists FKhro52ohfqfbay9774bev0qinr
Hibernate: 
    drop table if exists alert_history cascade
Hibernate: 
    drop table if exists alerts cascade
Hibernate: 
    drop table if exists energy_data cascade
Hibernate: 
    drop table if exists energy_forecasts cascade
Hibernate: 
    drop table if exists historical_weather_data cascade
Hibernate: 
    drop table if exists subscriptions cascade
Hibernate: 
    drop table if exists users cascade
Hibernate: 
    drop table if exists weather_data cascade
Hibernate: 
    drop table if exists weather_forecast cascade
2025-10-04 11:12:06 - HikariPool-1 - Shutdown initiated...
2025-10-04 11:12:06 - HikariPool-1 - Shutdown completed.
2025-10-04 11:12:06 - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-10-04 11:12:06 - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  14.206 s
[INFO] Finished at: 2025-10-04T11:12:07-05:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:3.2.0:run (default-cli) on project weather-service: Process terminated with exit code: 1 -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
